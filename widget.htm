<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chat Widget with n8n Backend</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }

        .chat-container {
            border: 1px solid #ddd;
            border-radius: 8px;
            overflow: hidden;
            display: flex;
            flex-direction: column;
            height: 500px;
        }

        .chat-header {
            background-color: #4285f4;
            color: white;
            padding: 10px;
            text-align: center;
            font-weight: bold;
        }

        .chat-messages {
            flex: 1;
            padding: 10px;
            overflow-y: auto;
            background-color: #f9f9f9;
        }

        .message {
            margin-bottom: 10px;
            padding: 8px 12px;
            border-radius: 18px;
            max-width: 70%;
            word-wrap: break-word;
        }

        .user-message {
            background-color: #e1f5fe;
            margin-left: auto;
            border-bottom-right-radius: 4px;
        }

        .bot-message {
            background-color: #e8eaf6;
            margin-right: auto;
            border-bottom-left-radius: 4px;
        }

        .chat-input-container {
            display: flex;
            padding: 10px;
            border-top: 1px solid #ddd;
            background-color: white;
        }

        #chat-input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 20px;
            outline: none;
        }

        #send-button {
            background-color: #4285f4;
            color: white;
            border: none;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            margin-left: 10px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        #send-button:hover {
            background-color: #3367d6;
        }

        .typing-indicator {
            display: none;
            color: #666;
            font-style: italic;
            margin: 5px 0;
        }

        .timestamp {
            font-size: 10px;
            color: #999;
            margin-top: 4px;
            display: block;
        }

        .typing-indicator {
            display: none;
            margin: 10px 0 0 20px;
        }

        .typing-indicator span {
            display: inline-block;
            width: 8px;
            height: 8px;
            background-color: #4285f4;
            border-radius: 50%;
            margin-right: 5px;
            animation: bounce 1.5s infinite;
        }

        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }

        @keyframes bounce {

            0%,
            60%,
            100% {
                transform: translateY(0);
                opacity: 0.6;
                width: 8px;
                height: 8px;
            }

            30% {
                transform: translateY(-5px);
                opacity: 1;
                width: 10px;
                height: 10px;
            }
        }
    </style>
</head>

<body>
    <div class="chat-container">
        <div class="chat-header">Chat with n8n Bot</div>
        <div class="chat-messages" id="chat-messages">
            <div class="message bot-message">Hello! How can I help you today?</div>
        </div>
        <div class="typing-indicator" id="typing-indicator">
            <span></span> <span></span> <span></span>
        </div>
        <div class="chat-input-container">
            <input type="text" id="chat-input" placeholder="Type your message here..." autofocus>
            <button id="send-button">
                <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                    stroke-linecap="round" stroke-linejoin="round">
                    <line x1="22" y1="2" x2="11" y2="13"></line>
                    <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                </svg>
            </button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const chatMessages = document.getElementById('chat-messages');
            const chatInput = document.getElementById('chat-input');
            const sendButton = document.getElementById('send-button');
            const typingIndicator = document.getElementById('typing-indicator');

            // Configuration - replace with your actual n8n webhook URL
            const n8nEndpoint = 'https://myname.app.n8n.cloud/webhook/123456-654321-123456-123456/chat';

            // Generate a session ID (or you could use localStorage to maintain it between page refreshes)
            //let sessionId = "sess-date-hour-aaa-bbb-ccc"; //random token
            let sessionId = generateSessionId();

            function generateSessionId() {
                // Get current date and time in format YYYYMMDD'z'HHMMSS
                const now = new Date();
                const year = now.getFullYear();
                const month = String(now.getMonth() + 1).padStart(2, '0');
                const day = String(now.getDate()).padStart(2, '0');
                const hours = String(now.getHours()).padStart(2, '0');
                const minutes = String(now.getMinutes()).padStart(2, '0');
                const seconds = String(now.getSeconds()).padStart(2, '0');

                const dateTime = `${year}${month}${day}-${hours}${minutes}${seconds}`;

                // Generate random strings for the remaining parts
                const randomPart1 = generateRandomString(4);
                const randomPart2 = generateRandomString(4);
                const randomPart3 = generateRandomString(4);

                // Format: sess-YYYYMMDD'z'HHMMSS-xxxx-yyyy-zzz
                return `sess-${dateTime}-${randomPart1}-${randomPart2}-${randomPart3}`;
            }

            function generateRandomString(length) {
                const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';
                let result = '';
                for (let i = 0; i < length; i++) {
                    result += characters.charAt(Math.floor(Math.random() * characters.length));
                }
                return result;
            }

            function formatDateTime(dateTimeString) {
                try {
                    const date = new Date(dateTimeString);
                    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
                } catch (e) {
                    return '';
                }
            }

            function addMessage(text, isUser, timestamp = null) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `message ${isUser ? 'user-message' : 'bot-message'}`;
                messageDiv.textContent = text;

                // Add timestamp if available
                if (timestamp) {
                    const timeSpan = document.createElement('span');
                    timeSpan.className = 'timestamp';
                    timeSpan.textContent = formatDateTime(timestamp);
                    messageDiv.appendChild(timeSpan);
                }

                chatMessages.appendChild(messageDiv);

                // Scroll to bottom
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            function showTypingIndicator() {
                typingIndicator.style.display = 'block';
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }

            function hideTypingIndicator() {
                typingIndicator.style.display = 'none';
            }

            async function sendMessage() {
                const message = chatInput.value.trim();
                if (!message) return;

                // Add user message to chat
                addMessage(message, true);
                chatInput.value = '';

                // Show typing indicator
                showTypingIndicator();

                try {
                    // Format the request payload as specified
                    const payload = {
                        action: "sendMessage",
                        sessionId: sessionId,
                        chatInput: message
                    };

                    // Send request to n8n
                    const response = await fetch(n8nEndpoint, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(payload)
                    });

                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }

                    const data = await response.json();

                    // Hide typing indicator
                    hideTypingIndicator();

                    // Add bot response to chat - using the output field from the response
                    if (data && data.output) {
                        addMessage(data.output, false, data["date/time"]);
                    } else {
                        addMessage("I received your message but couldn't process a response.", false);
                    }
                } catch (error) {
                    console.error('Error:', error);
                    hideTypingIndicator();
                    addMessage("Sorry, there was an error communicating with the server.", false);
                }
            }

            // Event listeners
            sendButton.addEventListener('click', sendMessage);

            chatInput.addEventListener('keypress', function (e) {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });
        });
    </script>
</body>
</html>